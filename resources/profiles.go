// Code generated by go-bindata.
// sources:
// profiles/scaling_100_histogram.csv
// profiles/scaling_25_histogram.csv
// profiles/scaling_50_histogram.csv
// profiles/scaling_75_histogram.csv
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _profilesScaling_100_histogramCsv = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x34\x96\x5b\xb6\xdd\x20\x0c\x43\xff\x33\x96\xae\xbb\x02\xf8\x39\xff\x89\xd5\xe2\xec\xf4\x2b\x1c\x70\x62\x6d\xc9\xf4\x6e\xdf\xfe\xfe\x7b\xff\xde\x77\xd7\xb3\xe3\x5b\x78\xcc\xc2\xdf\xdf\xa2\xce\xb3\x9b\xc5\x3a\xfd\x9c\xcd\x62\xef\x3d\x8b\xfc\xd5\x6c\x7f\xce\x79\xd9\xc8\x9a\x05\x2f\x3b\x6f\xcc\x82\x53\xe7\x9c\xe7\x18\xf5\x27\xd6\x73\x9c\x1a\x5b\x39\x0b\x76\xcc\xec\x39\xf1\xed\xe4\x7c\xe6\x6b\x6d\xbe\xf2\x35\xe6\xd3\xa5\xde\xfb\x5b\x4c\x97\x27\xf9\x4a\xa8\xcb\xa2\x22\x62\x5e\xdc\xbc\x2b\xd5\x72\xb3\x93\xf3\xb2\xa6\xa4\xa6\x4b\x7b\x39\x55\xd3\xa5\xbd\x9c\xea\x69\xcc\x5e\x3e\xd3\xd3\x98\xbd\xd4\xf4\x34\x66\xeb\x57\xb3\xc4\xcc\xd6\xaf\x66\xcd\xbf\x59\xfc\x6a\xd6\x9a\x06\x46\xdd\x6f\x67\x30\xd9\xa6\x44\x2a\x6d\x53\x22\x95\x06\xd9\xa5\x43\x14\x48\x8b\x01\x76\xe5\x80\x35\xc0\xae\xdb\x25\x60\xd7\x6d\xcc\x38\x76\x1b\xb3\xdf\xb1\x2d\x67\x0d\xe4\xfb\x76\x69\xbf\x9a\x7d\x1b\x83\xff\x96\x4d\x46\x1a\xf6\xa9\xf9\x28\x66\xec\xdb\xa6\x53\x23\xe8\x86\x33\x3b\x24\x13\x67\x76\xf4\x1c\xc3\x9b\x2d\xce\x16\xd4\x0c\x67\x4b\x4a\x6e\xd3\x49\x49\x4d\x00\xac\xd8\xb9\x9c\x8b\xfa\xab\x00\xd3\xa6\x00\xc7\xce\xd5\x42\x16\xcf\xd5\x82\x7f\x47\xc4\x1d\xff\x8e\x52\xea\x58\x76\xa4\xd2\xdf\xef\xd8\x34\xe9\x58\x76\x94\x5f\xc7\xb2\xa3\xcc\x3a\x96\x1d\xc1\x70\x2c\x3b\x8a\xa9\xe3\xd9\x51\x4c\x1d\xcf\x8e\x42\xe7\x78\x76\x04\xc3\x71\xed\x08\x86\x63\xd4\x58\x34\xcf\x9c\x52\xce\x1c\x9f\x4e\x0d\x66\xc7\xa7\x23\x07\x1d\x6b\xe6\x09\x5f\x4c\x92\x1d\x5f\x4c\xb3\xe8\xd0\xb7\x2b\x0c\xfa\x76\x85\x41\xdf\xae\x16\xe8\xdb\xd5\x02\x7e\xbb\x5a\x98\x19\x53\xe4\x9c\x99\xb1\xe9\x11\x27\x4c\x1e\x7b\x7d\xbf\xeb\x93\x38\x61\x0a\xa3\xc3\xdf\x34\x58\x0e\x7f\x93\xe0\x60\x64\x4c\xee\x07\xfc\x4d\x8a\x03\xfe\x26\xfb\x03\xe4\x26\xf9\x01\x72\x93\xe3\x01\x72\x7f\x02\xde\x2e\xf9\x01\x62\x97\xaf\x01\x62\x97\xfc\x60\x30\x5c\xf2\x03\xde\x03\x6b\x9e\x29\xd1\x85\x13\xf0\x76\x99\x17\x8c\x82\x4b\x7d\xc0\x7b\x00\xcf\x67\xa0\xec\x72\x32\x48\xbf\x4b\x72\x90\x7e\x97\xe4\x00\xb9\x5f\x95\x20\x9f\x03\x4f\x00\xd9\x35\xa5\x01\x64\xbf\x8a\x81\xec\xca\x78\x80\xd9\x65\x78\x10\xf8\x41\x04\xf0\xb8\x8a\x61\x1c\x8a\x75\xc0\x38\x24\x3f\xc9\x78\x48\x7e\xc2\x78\x3a\x9a\x67\x4e\xc9\xef\x24\xe2\x21\xf9\x09\xef\xd0\x54\x27\xbc\x43\xf2\x13\xde\x21\xc7\x13\xca\x21\xc7\x13\xb0\x21\x16\x09\xcc\x10\x8b\xe4\xc6\x09\xb1\x48\xfb\x8e\x0d\xff\x24\xc9\x21\xfd\x49\x7e\x43\xf6\x27\x64\x43\x30\x32\xbe\x9d\xc9\x62\xc6\xb7\xa3\xde\x88\x6c\x08\x53\x42\x33\x84\x29\xb9\x31\xe6\x67\xae\xf5\xd4\xf4\x27\xf4\x52\xf6\x27\x00\x53\x30\x08\x6c\x5e\xfd\xdc\x1e\x79\xf5\x43\x36\x75\x88\x02\x99\x5f\x70\x4d\xa1\x28\xb8\xa6\xd4\x17\x2c\x53\x82\x0b\x96\x29\xc1\x05\xb1\x94\xe0\x22\x97\x29\xc1\x45\x14\x53\x82\x0b\x48\x29\x8d\x05\x8a\x94\xc6\x22\x64\x29\x8d\x45\xc8\x52\x93\x50\x70\x29\xa5\xa1\x08\x59\x49\x73\x01\xa9\x14\x8d\x82\x4b\x29\x1a\x45\xe4\x4a\x34\x8a\xc8\x95\x2e\xb9\x22\x72\xa5\x8b\xa1\x20\x58\x0a\x4a\x41\xb0\x74\x31\x14\xd4\x4a\xd9\x28\xa8\xd5\xa5\x03\xb5\xba\x40\xe0\x56\x8a\x43\xc3\xad\x44\xa7\xb9\x00\x4a\x0c\x1a\x88\x25\xd9\x4d\x3a\x4b\xe2\x1a\xa2\xf3\x33\x38\x5b\x17\x5b\x13\xcd\x96\x98\x26\x9a\x2d\x31\xcd\x6d\xd0\x6a\xb9\xb9\x7d\x5b\x2d\x37\x16\xb4\xbc\x6d\x2c\x68\xcd\x79\x93\xe0\xd6\x7f\x5f\x8d\x1f\x2d\x65\x4d\x82\xdb\x9f\xb6\xef\x71\x44\x36\x91\x6d\x45\xa0\xf1\xa9\x35\x0d\x0d\xe6\xbe\x8a\x81\xd9\x57\x31\xa1\x6b\xe5\xa1\x41\xd6\xba\x19\xd6\xfb\xf5\x39\x51\x9b\x05\xe7\x14\x95\xf5\x7e\x1d\x68\x04\xd6\x4b\x3e\x5a\x91\x98\x15\x8a\x44\x6a\xfe\xaa\xd0\x6a\xfd\xbd\xcf\xff\x00\x00\x00\xff\xff\x18\xa2\x6b\xdd\xaa\x09\x00\x00")

func profilesScaling_100_histogramCsvBytes() ([]byte, error) {
	return bindataRead(
		_profilesScaling_100_histogramCsv,
		"profiles/scaling_100_histogram.csv",
	)
}

func profilesScaling_100_histogramCsv() (*asset, error) {
	bytes, err := profilesScaling_100_histogramCsvBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "profiles/scaling_100_histogram.csv", size: 2474, mode: os.FileMode(420), modTime: time.Unix(1460458878, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _profilesScaling_25_histogramCsv = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x34\x93\x4d\x96\xc6\x20\x08\x04\xf7\x9e\x65\xde\xf7\xa4\x15\x84\xfb\x5f\x6c\xf8\xe9\xec\xa2\xa1\xb0\xad\x90\x07\xdd\x7f\xfb\xb7\xb7\xda\x7a\xba\xfb\x59\x44\xd6\x7b\xb3\x2f\xf6\x96\xef\xd9\x07\xb0\x9c\xf5\xd0\xe5\x2c\x3f\xdb\x56\x70\xfb\x9c\xb3\xe2\xdb\xf7\x58\xc1\x36\xf7\x61\xc9\x66\x1f\x85\xe7\x82\x84\xfa\xc9\x05\xcb\x2c\x4f\x16\x21\x6f\x27\x72\xf1\xbd\x89\xbb\x04\x6c\xf0\x34\x9f\xc9\xbf\x97\xcd\x40\xc4\x33\x8a\x80\x88\x67\x16\x39\x44\x3c\xc3\xc8\x61\x59\xc8\xcb\x05\xcb\xe2\x66\xe7\xcb\xb2\xa8\x9c\x77\x5a\x67\xc4\x6c\x7d\x87\x91\x12\x54\xc9\x66\x51\xa1\x6d\x1a\x48\xe9\x12\x3a\x12\xa9\xd0\x94\x24\x52\xa1\xa9\x29\x63\x65\x37\x27\x73\x2b\x41\x90\xc9\xdb\xd0\x9f\x98\xd5\x3e\x89\x0e\x43\x83\xa8\x23\x41\x83\xa8\xaf\x02\x1a\x44\xb9\xc5\x1e\x06\x9a\x31\x41\x9d\x28\x69\x10\x32\xe5\x06\x42\xa6\x0c\x80\xa2\x8f\x74\xd9\x30\xa7\xbe\x26\x28\xfa\x74\x6b\x9a\x3e\x25\x0a\x34\x7d\xeb\x36\xa0\xe9\xdb\x87\xd2\xb4\xe6\xd3\x00\x5a\x03\x00\x3a\xd7\xa9\x19\x40\xeb\x66\xa0\x73\x4b\x82\xc6\x6d\xf6\x87\x78\x4d\xdc\x21\x5e\x07\xa6\x7e\x2f\xe3\xd0\x61\xfc\x56\x2c\x1d\xc6\xcb\x1f\x74\x18\xef\xc0\x46\xa6\x5b\xdb\x30\xd1\xfe\x6c\x98\xe8\xab\xf0\x63\x46\x5f\xff\x0d\x13\xc7\xf2\x1c\xfe\x21\xd1\x2e\xf8\x8b\x44\x4d\x2d\xf8\x8f\x44\x8d\x20\x38\x00\x51\x53\x07\x0e\x40\xd4\xd4\x81\x03\x10\x1d\x87\x03\x10\x1d\xa7\x07\x40\x7e\x7b\xfd\x07\x00\x00\xff\xff\x82\xe1\x25\x49\x86\x03\x00\x00")

func profilesScaling_25_histogramCsvBytes() ([]byte, error) {
	return bindataRead(
		_profilesScaling_25_histogramCsv,
		"profiles/scaling_25_histogram.csv",
	)
}

func profilesScaling_25_histogramCsv() (*asset, error) {
	bytes, err := profilesScaling_25_histogramCsvBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "profiles/scaling_25_histogram.csv", size: 902, mode: os.FileMode(420), modTime: time.Unix(1460458328, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _profilesScaling_50_histogramCsv = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x34\x94\x51\x76\x6d\x21\x08\x43\xff\xcf\x58\xde\xea\x52\x01\x85\xf9\x4f\xec\x11\xdd\xb7\x5f\xa5\x87\x28\xd9\xc1\xce\x1a\x63\xfc\x1b\x7f\x63\xac\xfc\xd6\xf8\x15\xb1\xbb\x38\x71\x8b\x39\xe7\xb7\x26\x5f\xa6\x55\x17\x8b\x2f\xfb\x74\x41\xdb\x8a\x6f\x2d\xba\x6c\xb4\xbe\x9b\x5e\x91\x2d\x31\xbe\xb8\x7b\x17\x7c\x69\x85\xa1\x0e\xdd\xe8\x34\x6d\xdd\xe8\x5c\xb2\x75\xa3\xa3\x38\x6b\x75\x81\xe6\xb4\x3e\x90\xa4\xd9\xb7\xce\xaf\xd8\xad\x3f\x74\xa5\xae\x4f\xf4\x35\x7b\xe2\x9f\xe5\x3a\x7d\x58\xbd\x6b\x5a\x50\x4f\x30\x45\xc2\x20\x31\x45\xc2\x06\x3d\x7d\x4b\x17\xb4\x09\x8b\xf9\xaf\xe8\x21\x2d\xde\x25\x53\x58\x6c\x53\xac\x9e\xd8\x36\x6d\xcd\xc8\x18\x72\x5a\x0f\x69\x87\x93\xf5\x77\x04\xa1\x4b\x18\x7e\xee\xf2\xcf\x92\x26\x79\x34\x9c\x4c\xd9\xb2\xa4\x4d\xb6\x0c\x5b\x53\xb6\x0c\x5b\xeb\x9a\xa9\xa7\x59\x77\x64\x6c\xae\xd9\x47\x3b\x36\x97\x86\x71\x6c\x2e\x65\xe1\x03\x4d\x43\x76\x2c\xaf\xea\xf0\x9c\x4d\x30\x91\x71\x36\xc1\x64\xd9\xe7\x93\x98\x2c\x3b\x6b\x61\xeb\xe4\xe7\xec\x85\xf5\xcf\xe7\xf1\x2b\x74\x67\xd0\xa6\x25\xf1\xcd\x69\x5a\x12\x07\xa0\xf5\xfd\xe0\x33\xed\x85\xc3\xcf\xb4\x17\x0e\x3f\xd3\x5e\x38\x04\x2d\x7b\xfb\x1c\x82\x2e\xcf\x9e\x4f\xe3\x77\x18\x70\x7a\x2c\x15\x4f\xe3\x02\xed\xe0\x74\x11\x74\x70\xc6\x9d\x19\x9c\xb1\xe5\x13\x9c\x21\xea\x0e\xce\x2d\x37\x01\xce\xad\x41\x03\x9c\x47\x5b\x13\xe0\x3c\xaf\xed\x69\x8e\xa2\x0e\x78\x1e\x05\x1a\xf0\x3c\x22\x1d\xf0\x4c\x91\x0e\x78\xa6\x62\x0b\x78\xa6\xfc\xc4\x7a\x9a\x14\xc2\xe0\xd1\x65\xf3\xef\x02\x8d\x78\x06\x2f\x30\xef\x6c\x86\x46\xb6\x83\xe7\x98\x82\x18\x3c\xc8\x46\xf1\x05\xef\x31\x05\x34\x78\x82\xa9\x2d\x0c\xf6\x3e\xf5\xd2\x82\x40\x53\x3c\x22\x38\xf9\x3a\x20\xdd\x14\xd0\xd8\xaf\xad\x87\x24\xda\xd2\x72\x06\xe1\xd6\x75\x49\x9e\x75\x99\x91\x67\x69\xb9\x82\x3c\x4b\xcb\x15\xe4\x59\xfa\x3f\x13\xe4\x59\xd7\x25\x79\x96\x76\x38\xc8\xb3\xb4\x2a\x41\x84\x75\x2d\x13\x61\xc9\xf2\x26\xb5\x4e\xb2\x7f\xa7\xeb\x34\xd9\x4d\x4e\x25\xff\x9b\x9c\x4a\x39\x6d\xa2\x29\xb9\xdc\x04\x50\x72\xb9\x2f\xf3\xf9\x37\xbe\xff\x01\x00\x00\xff\xff\x9c\xbc\xa7\x82\x5a\x05\x00\x00")

func profilesScaling_50_histogramCsvBytes() ([]byte, error) {
	return bindataRead(
		_profilesScaling_50_histogramCsv,
		"profiles/scaling_50_histogram.csv",
	)
}

func profilesScaling_50_histogramCsv() (*asset, error) {
	bytes, err := profilesScaling_50_histogramCsvBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "profiles/scaling_50_histogram.csv", size: 1370, mode: os.FileMode(420), modTime: time.Unix(1460458848, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _profilesScaling_75_histogramCsv = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x3c\x94\x49\xb6\xdd\x30\x08\x05\xe7\x5e\x4b\xce\x3b\xea\xe8\xf6\xbf\xb1\x70\xe5\xf2\x1f\xc5\xca\x13\x08\xaa\xe0\xcf\xb2\x31\xfe\x8d\xdf\x58\x91\xcf\xaa\x65\xf7\xb0\x87\x3f\x7b\x7c\x87\xbd\xfb\x10\x1c\xb2\x9e\x3d\x89\x39\x33\x9e\xbd\x06\x87\x73\xfa\xc0\xb5\x13\xeb\xd9\x9b\x5f\x6c\x65\x1f\xc8\x66\xd6\xa9\x37\x09\x2c\x3b\xf5\x26\xc6\xe7\x7c\xf6\x21\xc6\x77\xbf\x73\xb8\xe6\xde\xef\x18\xbf\xc4\xea\xd4\x46\xb6\xb0\xfe\xe6\x56\xaa\x4e\x23\x59\xa9\x00\x7f\x6f\xcd\xa1\x67\xfc\xbd\x36\xa7\x9e\xf1\xf7\xda\x9c\x7a\x26\x06\xbf\xe8\x99\x20\x66\x56\xb7\x13\xc4\xac\x7e\x26\xb9\x25\x50\xbb\x38\x5c\x50\x50\x9b\x02\x75\xc6\x77\x68\x50\x67\x10\x2f\x50\x07\x84\x53\xa0\xce\x24\x81\x40\x9d\x49\x8c\xf5\x27\x97\xc4\xec\x9c\xef\xff\x9b\xd9\x01\xc6\x14\xb3\xf3\x35\x23\x66\xe7\x6b\x46\xcc\x4e\x12\x23\x66\xf6\x77\xad\x9b\xb1\xaf\x4d\x01\xb4\xaf\xcd\x06\x68\x5f\x97\xd9\xcd\x58\x90\x2c\x7d\x3e\xf6\xf5\x9c\xdd\x8c\x7d\x99\xab\xeb\xb7\x7c\x63\x3a\x13\x28\xd6\xe8\x22\x0d\x14\x4b\x90\x8d\xd1\x5a\x4b\x0f\xd6\x9b\x77\x35\x4a\x1f\x84\x08\xa5\x03\x6c\x89\x9e\xc3\x68\x09\x98\xc3\x68\x09\x98\xc3\x68\x09\x98\x33\x80\x4b\x60\x1c\x64\x4b\x2c\x9c\x69\x5c\x6a\xd2\x17\x31\xa1\x77\x16\x31\x6a\xcc\x99\xd3\xa5\xc6\x9c\x39\x5d\x6a\xcc\x19\xcd\xad\x76\x9c\xd1\xdc\x1a\x06\x67\x34\xf7\x56\x02\xd4\x6c\x79\x72\xd4\x6c\x31\xf7\x43\x8c\x26\xd0\x19\xda\xa3\xd1\x72\x86\xf6\xdc\x18\xa6\xf6\xdc\x18\xa6\xf6\x68\x84\xdd\xdf\x98\xe6\xc4\xfc\x9a\x00\x3a\x2e\x4d\x83\xe5\x28\xb7\x4b\x03\xb1\x76\x69\x20\xd6\x6e\x5e\xcc\xda\x05\x80\x59\xbb\x00\x30\x6b\xb7\x4a\xcc\xba\xf6\xc4\x31\xeb\xb7\xe7\x7c\x63\xfc\x56\x80\x69\xbf\x15\x60\xda\xbb\x4c\x3c\xfb\x7d\x1f\xcf\xae\x31\x0d\x44\xbb\xde\x0f\x44\xbb\x9a\x0c\x36\xc3\xc5\x3c\xb0\x1e\x62\x1e\x58\x0f\x15\x13\x58\x0f\xed\x69\x60\x3d\x04\x33\x10\x1d\x2a\x33\x10\x1d\x2a\x33\x10\xdd\xff\xf6\x37\x99\xb5\xa7\x81\xe7\xd0\x70\x05\x7f\x8f\x42\x04\x03\xe9\xa1\x0d\x0a\xa4\x87\x08\x06\xd2\x43\x1b\x14\x48\x0f\x0d\x57\x20\x3d\x6e\x6f\x48\x0f\xb1\x0d\xa4\x47\xe9\x1d\xa4\xc7\x6d\x14\xe9\x39\x7a\x02\x02\xe9\xa9\x5d\x09\xa4\xe7\x6d\x14\xef\xa9\x0e\x90\x9b\xda\x95\x40\x6e\xde\x0e\x90\x9b\x1a\xa7\x40\x6e\x5e\xec\xc8\xcd\xdb\x0e\x3e\xdb\x64\x7f\x73\xeb\xd6\x8c\xce\xd4\xda\x07\x3a\x53\x0b\x11\x08\xcd\xdb\x00\x42\xeb\x49\x9c\x95\xaa\x4f\x9c\x95\x34\x25\xce\x4a\xad\x24\x32\x4a\x66\x12\x19\x9d\xfe\x49\xf8\x97\x36\x3d\x41\x5e\xda\xa6\x04\x79\x69\xb2\x12\xe4\xa5\xb5\x4f\x28\x57\x87\xc3\xb8\xb4\xe7\x09\xe3\x92\xa4\x84\x71\x57\xda\xdf\xdc\xd2\x94\x25\x54\x4b\x5a\x12\xaa\xa5\x16\x13\x92\x25\x2d\x09\xbc\xd2\x32\xe4\xc5\x32\x7f\xe3\xf9\x1f\x00\x00\xff\xff\xf2\xba\x6e\xc8\x1b\x07\x00\x00")

func profilesScaling_75_histogramCsvBytes() ([]byte, error) {
	return bindataRead(
		_profilesScaling_75_histogramCsv,
		"profiles/scaling_75_histogram.csv",
	)
}

func profilesScaling_75_histogramCsv() (*asset, error) {
	bytes, err := profilesScaling_75_histogramCsvBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "profiles/scaling_75_histogram.csv", size: 1819, mode: os.FileMode(420), modTime: time.Unix(1460458862, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"profiles/scaling_100_histogram.csv": profilesScaling_100_histogramCsv,
	"profiles/scaling_25_histogram.csv":  profilesScaling_25_histogramCsv,
	"profiles/scaling_50_histogram.csv":  profilesScaling_50_histogramCsv,
	"profiles/scaling_75_histogram.csv":  profilesScaling_75_histogramCsv,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"profiles": &bintree{nil, map[string]*bintree{
		"scaling_100_histogram.csv": &bintree{profilesScaling_100_histogramCsv, map[string]*bintree{}},
		"scaling_25_histogram.csv":  &bintree{profilesScaling_25_histogramCsv, map[string]*bintree{}},
		"scaling_50_histogram.csv":  &bintree{profilesScaling_50_histogramCsv, map[string]*bintree{}},
		"scaling_75_histogram.csv":  &bintree{profilesScaling_75_histogramCsv, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
